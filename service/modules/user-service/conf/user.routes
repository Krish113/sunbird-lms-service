# Routes
# This file defines all application routes (Higher priority routes first)
#OPTIONS    /*all                        @controllers.LearnerController.preflight(all)
# ~~~~

#user management api 
POST	/v1/user/create				    @controllers.usermanagement.UserController.createUser()
PATCH	/v1/user/update					@controllers.usermanagement.UserController.updateUserProfile()
POST	/v1/user/login					@controllers.usermanagement.UserController.login()
POST	/v1/user/logout					@controllers.usermanagement.UserController.logout()
POST	/v1/user/changepassword			@controllers.usermanagement.UserController.changePassword()
GET  	/v1/user/getprofile/:uid			@controllers.usermanagement.UserController.getUserProfile(uid:String)
GET  	/v1/user/read/:uid				@controllers.usermanagement.UserController.getUserProfile(uid:String)
POST    /v1/user/getuser                 @controllers.usermanagement.UserController.getUserDetailsByLoginId()
POST    /v1/user/download				@controllers.usermanagement.UserController.downloadUsers()
POST  	/v1/user/block			         @controllers.usermanagement.UserController.blockUser()
POST    /v1/user/assign/role			 @controllers.usermanagement.UserController.assignRoles()
POST  	/v1/user/unblock			         @controllers.usermanagement.UserController.unBlockUser()
PATCH   /v1/user/update/logintime			 @controllers.usermanagement.UserController.updateLoginTime()
GET     /v1/user/mediatype/list               @controllers.usermanagement.UserController.getMediaTypes()
POST    /v1/user/forgotpassword			@controllers.usermanagement.UserController.forgotpassword()


#organisation management api
POST	 /v1/org/create		@controllers.organisationmanagement.OrganisationController.createOrg()
PATCH	 /v1/org/update		@controllers.organisationmanagement.OrganisationController.updateOrg()
POST	 /v1/org/read     @controllers.organisationmanagement.OrganisationController.getOrgDetails()
PATCH	/v1/org/status/update		@controllers.organisationmanagement.OrganisationController.updateOrgStatus()
POST    /v1/org/approve             @controllers.organisationmanagement.OrganisationController.approveOrg()
POST    /v1/org/member/join            @controllers.organisationmanagement.OrganisationController.joinUserOrganisation()
POST    /v1/org/member/approve         @controllers.organisationmanagement.OrganisationController.approveUserOrganisation()
POST    /v1/org/member/reject         @controllers.organisationmanagement.OrganisationController.rejectUserOrganisation()
POST     /v1/org/member/add			@controllers.organisationmanagement.OrganisationController.addMemberToOrganisation()
POST    /v1/org/member/remove	@controllers.organisationmanagement.OrganisationController.removeMemberFromOrganisation()
POST	/v1/org/download		@controllers.organisationmanagement.OrganisationController.downloadOrgs()
GET		/v1/org/type/list		@controllers.organisationmanagement.OrganisationController.getOrgTypeList()
POST	/v1/org/type/create		@controllers.organisationmanagement.OrganisationController.createOrgType()
PATCH	/v1/org/type/update		@controllers.organisationmanagement.OrganisationController.updateOrgType()



#permission

GET   /v1/role/read						@controllers.usermanagement.UserController.getRoles()

#search
POST	/v1/search/compositesearch  			@controllers.search.SearchController.compositeSearch()


#Mock APIs to finish API Gateway onboarding

POST   /v1/user/search							@controllers.usermanagement.UserController.search()
#GET    /v1/user/retire							@controllers.LearnerController.getHealth()
#GET   /v1/org/member/suspend					@controllers.LearnerController.getHealth()
POST  /v1/org/search							@controllers.organisationmanagement.OrganisationController.search()
#GET   /health									@controllers.healthmanager.HealthController.getHealth()

#bulk upload

POST /v1/user/upload 						@controllers.bulkapimanagement.BulkUploadController.uploadUser()
POST /v1/bulk/user/upload 						@controllers.bulkapimanagement.BulkUploadController.uploadUser()
GET  /v1/upload/status/:pid				@controllers.bulkapimanagement.BulkUploadController.getUploadStatus(pid:String)
POST /v1/org/upload 						@controllers.bulkapimanagement.BulkUploadController.uploadOrg()
POST /v1/batch/bulk/enrollment 			   @controllers.bulkapimanagement.BulkUploadController.bulkBatchEnrollment()
GET  /v1/user/data/encrypt				@controllers.bulkapimanagement.BulkUploadController.userDataEncryption()
GET  /v1/user/data/decrypt				@controllers.bulkapimanagement.BulkUploadController.userDataDecryption()

#POST  /v1/file/upload 						@controllers.storage.FileStorageController.uploadFileService()

#metrics APIs for dashboard
GET  /v1/dashboard/creation/org/:orgId            @controllers.metrics.OrganisationMetricsController.orgCreation(orgId:String)
GET  /v1/dashboard/consumption/org/:orgId         @controllers.metrics.OrganisationMetricsController.orgConsumption(orgId:String)
GET  /v1/dashboard/creation/user/:userId          @controllers.metrics.UserMetricsController.userCreation(userId:String)
GET  /v1/dashboard/consumption/user/:userId       @controllers.metrics.UserMetricsController.userConsumption(userId:String)

GET  /v1/dashboard/creation/org/:orgId/export            @controllers.metrics.OrganisationMetricsController.orgCreationReport(orgId:String)
GET  /v1/dashboard/consumption/org/:orgId/export         @controllers.metrics.OrganisationMetricsController.orgConsumptionReport(orgId:String)

#Sync
POST /v1/data/sync                          @controllers.search.SearchController.sync()

#Email
POST /v1/notification/email					@controllers.notificationservice.EmailServiceController.sendMail()

#Badges api

GET  /v1/badges/list                        @controllers.badges.BadgesController.getBadges()
POST /v1/user/badges/add					@controllers.badges.BadgesController.addUserBadges()

#Health check
#GET  /v1/health                               @controllers.healthmanager.HealthController.getHealth()
#GET  /v1/:service/health                      @controllers.healthmanager.HealthController.getLearnerServiceHealth(service:String)


#Notes API
POST   /v1/note/create                         @controllers.notesmanagement.NotesController.createNote()
GET    /v1/note/read/:noteId                   @controllers.notesmanagement.NotesController.getNote(noteId:String)
PATCH  /v1/note/update/:noteId                 @controllers.notesmanagement.NotesController.updateNote(noteId:String)
POST   /v1/note/search                         @controllers.notesmanagement.NotesController.searchNote()
DELETE /v1/note/delete/:noteId                 @controllers.notesmanagement.NotesController.deleteNote(noteId:String)

#Audit History API
POST   /v1/audit/history                       @controllers.audit.AuditLogController.searchAuditHistory()
