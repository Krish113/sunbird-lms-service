# Routes
# This file defines all application routes (Higher priority routes first)
OPTIONS    /*all                        @controllers.LearnerController.preflight(all)
# ~~~~
GET      /v1/user/courses/:uid	        @controllers.LearnerController.getEnrolledCourses(uid:String)
GET      /v1/user/courses/list/:uid	        @controllers.LearnerController.getEnrolledCourses(uid:String)
POST     /v1/user/courses/enroll	    @controllers.LearnerController.enrollCourse()
POST     /v1/course/enrol	    		@controllers.LearnerController.enrollCourse()
POST     /v1/user/content/state	        @controllers.LearnerController.getContentState()
POST     /v1/content/state/read	        @controllers.LearnerController.getContentState()
PATCH    /v1/user/content/state     	@controllers.LearnerController.updateContentState()
PATCH    /v1/content/state/update     	@controllers.LearnerController.updateContentState()

#course management api
POST	/v1/course/create		@controllers.coursemanagement.CourseController.createCourse()
PATCH	/v1/course/update		@controllers.coursemanagement.CourseController.updateCourse()
POST	/v1/course/publish      @controllers.coursemanagement.CourseController.publishCourse()
POST	/v1/course/search       @controllers.coursemanagement.CourseController.searchCourse()
POST	/v1/course/delete       @controllers.coursemanagement.CourseController.deleteCourse()
GET	    /v1/course/:courseId     @controllers.coursemanagement.CourseController.getCourseById(courseId:String)
GET 	/v1/recommended/courses     @controllers.coursemanagement.CourseController.recommendedCourses()


#page management api
POST	/v1/page/create				  @controllers.pagemanagement.PageController.createPage()
PATCH	/v1/page/update				  @controllers.pagemanagement.PageController.updatePage()
GET	    /v1/page/read/:pageId    		  @controllers.pagemanagement.PageController.getPageSetting(pageId:String)
GET	    /v1/page/all/settings			  @controllers.pagemanagement.PageController.getPageSettings()
POST     /v1/page/assemble		  @controllers.pagemanagement.PageController.getPageData()

#Section management
POST	/v1/page/section/create				  @controllers.pagemanagement.PageController.createPageSection()
PATCH	/v1/page/section/update				  @controllers.pagemanagement.PageController.updatePageSection()
GET	    /v1/page/section/list			@controllers.pagemanagement.PageController.getSections()
GET     /v1/page/section/read/:sectionId		      @controllers.pagemanagement.PageController.getSection(sectionId:String)

#Assessment management
#POST   /v1/assessment/update					 @controllers.assessment.AssessmentController.saveAssessment()
#POST   /v1/assessment/result/read					 @controllers.assessment.AssessmentController.getAssessment()


#search
POST	/v1/search/compositesearch  			@controllers.search.SearchController.compositeSearch()


#Mock APIs to finish API Gateway onboarding

GET    /v1/user/retire							@controllers.LearnerController.getHealth()
GET   /v1/org/member/suspend					@controllers.LearnerController.getHealth()
GET   /health									@controllers.healthmanager.HealthController.getHealth()

#bulk upload

POST /v1/user/upload 						@controllers.bulkapimanagement.BulkUploadController.uploadUser()
POST /v1/bulk/user/upload 						@controllers.bulkapimanagement.BulkUploadController.uploadUser()
GET  /v1/upload/status/:pid				@controllers.bulkapimanagement.BulkUploadController.getUploadStatus(pid:String)
POST /v1/org/upload 						@controllers.bulkapimanagement.BulkUploadController.uploadOrg()
POST /v1/batch/bulk/enrollment 			   @controllers.bulkapimanagement.BulkUploadController.bulkBatchEnrollment()
GET  /v1/user/data/encrypt				@controllers.bulkapimanagement.BulkUploadController.userDataEncryption()
GET  /v1/user/data/decrypt				@controllers.bulkapimanagement.BulkUploadController.userDataDecryption()

#POST  /v1/file/upload 						@controllers.storage.FileStorageController.uploadFileService()

#Course batch
#POST     /v1/course/batch/create				@controllers.coursemanagement.CourseBatchController.createBatch()
#PATCH 	 /v1/course/batch/update				@controllers.coursemanagement.CourseBatchController.updateBatch()
#POST	 /v1/course/batch/users/add/:batchId			@controllers.coursemanagement.CourseBatchController.addUserToBatch(batchId:String)
#POST	 /v1/course/batch/users/remove          @controllers.coursemanagement.CourseBatchController.removeUsersFromBatch()
#GET		 /v1/course/batch/read/:batchId			@controllers.coursemanagement.CourseBatchController.getBatch(batchId:String)
#POST     /v1/course/batch/search                @controllers.coursemanagement.CourseBatchController.search()

#metrics APIs for dashboard
GET  /v1/dashboard/progress/course/:batchId      @controllers.metrics.CourseMetricsController.courseProgress(batchId:String)
GET  /v1/dashboard/consumption/course/:courseId   @controllers.metrics.CourseMetricsController.courseCreation(courseId:String)
GET  /v1/dashboard/progress/course/:courseId/export      @controllers.metrics.CourseMetricsController.courseProgressReport(courseId:String)



#Sync
POST /v1/data/sync                          @controllers.search.SearchController.sync()

#Email
POST /v1/notification/email					@controllers.notificationservice.EmailServiceController.sendMail()


#Health check
GET  /v1/health                               @controllers.healthmanager.HealthController.getHealth()
GET  /v1/:service/health                      @controllers.healthmanager.HealthController.getLearnerServiceHealth(service:String)


#Audit History API
POST   /v1/audit/history                       @controllers.audit.AuditLogController.searchAuditHistory()
